// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc2538.AerialAssist2014.subsystems;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.SpeedController;
import org.usfirst.frc2538.AerialAssist2014.RobotMap;
import org.usfirst.frc2538.AerialAssist2014.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc2538.AerialAssist2014.Robot;
/**
 *
 */
public class Pincers extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SpeedController swivelMotor = RobotMap.pincersSwivelMotor;
    DoubleSolenoid armActuator = RobotMap.pincersArmActuator;
    DoubleSolenoid elevatorActuator1 = RobotMap.pincersElevatorActuator1;
    //DoubleSolenoid elevatorActuator2 = RobotMap.pincersElevatorActuator2;
    DigitalInput forwardLimitSwitch = RobotMap.pincersForwardLimitSwitch;
    DigitalInput aftLimitSwitch = RobotMap.pincersAftLimitSwitch;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public boolean armForward = false;
    public boolean elevatorRaise = false;
    public boolean pincerSwitchReset = false;
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new SwivelPincer());
        //setDefaultCommand(new DisplayPincerData());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    
    public boolean okForward() {
        return !forwardLimitSwitch.get();
    }
    
    public boolean okAft() {
        return !aftLimitSwitch.get();
    }
    
    public void moveSwivelForward(){
        System.out.println("....forward...");
        Joystick shooterJoystick = Robot.oi.shooterJoystick;
        double throttle = shooterJoystick.getThrottle();
        double throttleProportion = throttle * (-.25) + .75; 
    
        double y = Robot.oi.shooterJoystick.getY();
        if (okForward()){
             //Attack Joystick is inverted, multiply values by -1
            swivelMotor.set(throttleProportion * y*(-1));
            //System.out.println("SWIVEL MOTOR = " + swivelMotor.get());
        }
        else{
            swivelMotor.set(0);
        }
    }
    public void moveSwivelAft(){
        System.out.println("....and aft...");
        Joystick shooterJoystick = Robot.oi.shooterJoystick;
        double throttle = shooterJoystick.getThrottle();
        double throttleProportion = throttle * (-.25) + .75; 
        
        double y = Robot.oi.shooterJoystick.getY();
        if (okAft()){
            //Attack joystick is inverted, multiply values by -1
            swivelMotor.set(throttleProportion * y * (-1));
            swivelMotor.set(0);
        }
        else{
            swivelMotor.set(0);
        }
    }
    public void moveSwivel(){
        Joystick shooterJoystick = Robot.oi.shooterJoystick;
        double throttle = shooterJoystick.getThrottle();
        double throttleProportion = throttle * (-.25) + .75;
        double y = shooterJoystick.getY();
        
        if(y < 0 && okForward()){
            swivelMotor.set(throttleProportion * y *(-1));
            System.out.println("MOVING FORWARD");
        }
        else if(y > 0 && okAft()){
            swivelMotor.set(throttleProportion * y *(-1));
            System.out.println("MOVING AFT");
        }
        else{
            swivelMotor.set(0);
            System.out.println("STOP MOVING!");
        }
    }
    public void swivelStop(){
        swivelMotor.set(0);
    }
    
    public void toggleElevator(){
        if(elevatorRaise){
            elevatorActuator1.set(DoubleSolenoid.Value.kForward);
        }
        else{
            elevatorActuator1.set(DoubleSolenoid.Value.kReverse);
        }
        //elevatorActuator2.set(DoubleSolenoid.Value.kForward);
    }
    
    public void testLimitSwitchesInput() {
        //System.out.println("Forward limit switch on: " + forwardLimitSwitch.get());
        //System.out.println("Aft limit switch on: " + aftLimitSwitch.get());
    }
    public void lowerElevator(){
        elevatorActuator1.set(DoubleSolenoid.Value.kReverse);
        //elevatorActuator2.set(DoubleSolenoid.Value.kReverse);
    }
    public void toggleArm(){
        //System.out.println("Opening arm....");
        if(armForward){
            armActuator.set(DoubleSolenoid.Value.kForward);
        }
        else{
            armActuator.set(DoubleSolenoid.Value.kReverse);
        }
    }
    public void closeArm(){
        armActuator.set(DoubleSolenoid.Value.kReverse);
    }
    public void displayPincerData(){
        SmartDashboard.putString("Arm Status", armActuator.getSmartDashboardType());
        SmartDashboard.putString("Elevator Status", elevatorActuator1.getSmartDashboardType());
        SmartDashboard.putNumber("Swivel Status", swivelMotor.get());
        SmartDashboard.putBoolean("Forward Limit Switch", forwardLimitSwitch.get());
        SmartDashboard.putBoolean("Aft Limit Switch", aftLimitSwitch.get());
    }
    
}
